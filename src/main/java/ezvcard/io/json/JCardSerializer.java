package ezvcard.io.json;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;

import ezvcard.VCard;

public class JCardSerializer extends StdSerializer<VCard> {
	private static final long serialVersionUID = 1L;

	public static void configureObjectMapper(ObjectMapper mapper) {
		List<JsonSerializer<?>> list = new ArrayList<JsonSerializer<?>>();
		list.add(new JCardSerializer());
		mapper.registerModule(new SimpleModule("jcardserializer", Version.unknownVersion(), list));
	}

	private static boolean addProdIdDefault = true;
	private boolean addProdId = addProdIdDefault;

	/**
	 * Sets whether or not to add a "PRODID" property to each vCard, saying that
	 * the vCard was generated by this library. For 2.1 vCards, the extended
	 * property "X-PRODID" will be added, since "PRODID" is not supported by
	 * that version.
	 * 
	 * @param add
	 *            the value that any new JCardSerializers will be configured
	 *            with (defaults to true)O
	 */
	public static void addProdIdByDefault(boolean add) {
		addProdIdDefault = add;
	}

	/**
	 * Creates a new JCardSerializer with default settings
	 */
	public JCardSerializer() {
		super(VCard.class);
	}

	/**
	 * Creates a new JCardSerializer with overridden settings
	 * 
	 * @param addProdId
	 *            true if the product id should be added to vcards written by
	 *            this object
	 */
	public JCardSerializer(boolean addProdId) {
		this();
		this.addProdId = addProdId;
	}

	@Override
	public void serialize(VCard value, JsonGenerator gen, SerializerProvider serializers)
			throws IOException, JsonProcessingException {
		JCardWriter writer = new JCardWriter(gen);
		writer.setAddProdId(addProdId);
		writer.write(value);
		writer.close();
	}

}
