package ezvcard.io.json;

import java.io.IOException;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ser.ContextualSerializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;

import ezvcard.VCard;
import ezvcard.io.scribe.ScribeIndex;
import ezvcard.io.scribe.VCardPropertyScribe;
import ezvcard.property.VCardProperty;

@JsonFormat
public class JCardSerializer extends StdSerializer<VCard>implements ContextualSerializer {
	private static final long serialVersionUID = 1L;

	private ScribeIndex index = new ScribeIndex();
	private boolean addProdId = true;
	private boolean versionStrict = true;

	/**
	 * Creates a new JCardSerializer with default settings
	 */
	public JCardSerializer() {
		super(VCard.class);
	}

	@Override
	public void serialize(VCard value, JsonGenerator gen, SerializerProvider serializers)
			throws IOException, JsonProcessingException {
		JCardWriter writer = new JCardWriter(gen);
		writer.setAddProdId(isAddProdId());
		writer.setScribeIndex(getScribeIndex());
		writer.setVersionStrict(isVersionStrict());
		writer.write(value);
	}

	public JCardSerializer createContextual(SerializerProvider prov, BeanProperty property)
			throws JsonMappingException {
		if (property != null) {
			JCardFormat annotation = property.getAnnotation(JCardFormat.class);
			if (annotation != null) {
				JCardSerializer result = new JCardSerializer();
				result.setAddProdId(annotation.addProdId());
				result.setVersionStrict(annotation.versionStrict());
				result.setScribeIndex(getScribeIndex());
				return result;
			}
		}

		return this;
	}

	/**
	 * Gets whether or not a "PRODID" property will be added to each vCard,
	 * saying that the vCard was generated by this library.
	 * 
	 * @return true if the property will be added, false if not (defaults to
	 *         true)
	 */
	public boolean isAddProdId() {
		return addProdId;
	}

	/**
	 * Sets whether or not to add a "PRODID" property to each vCard, saying that
	 * the vCard was generated by this library.
	 * 
	 * @param addProdId
	 *            true to add this property, false not to (defaults to true)
	 */
	public void setAddProdId(boolean addProdId) {
		this.addProdId = addProdId;
	}

	/**
	 * Gets whether properties that do not support the target version will be
	 * excluded from the written vCard.
	 * 
	 * @return true to exclude properties that do not support the target
	 *         version, false to include them anyway (defaults to true)
	 */
	public boolean isVersionStrict() {
		return versionStrict;
	}

	/**
	 * Sets whether properties that do not support the target version will be
	 * excluded from the written vCard.
	 * 
	 * @param versionStrict
	 *            true to exclude properties that do not support the target
	 *            version, false to include them anyway (defaults to true)
	 */
	public void setVersionStrict(boolean versionStrict) {
		this.versionStrict = versionStrict;
	}

	/**
	 * <p>
	 * Registers a property scribe. This is the same as calling:
	 * </p>
	 * <p>
	 * {@code getScribeIndex().register(scribe)}
	 * </p>
	 * 
	 * @param scribe
	 *            the scribe to register
	 */
	public void registerScribe(VCardPropertyScribe<? extends VCardProperty> scribe) {
		index.register(scribe);
	}

	/**
	 * Gets the scribe index.
	 * 
	 * @return the scribe index
	 */
	public ScribeIndex getScribeIndex() {
		return index;
	}

	/**
	 * Sets the scribe index.
	 * 
	 * @param index
	 *            the scribe index
	 */
	public void setScribeIndex(ScribeIndex index) {
		this.index = index;
	}
}
